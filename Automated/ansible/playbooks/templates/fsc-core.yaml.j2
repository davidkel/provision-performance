---
# ------------------- Logging section ---------------------------
logging:
 spec: debug

# ------------------- FSC Configuration -------------------------
fsc:
  id: fsc.{{ inventory_hostname }}

  identity:
    # X.509 certificate used as identity of this node
    cert:
      file: {{ __fscnode_identity_cert }}
    # Private key matching the X.509 certificate
    key:
      file: {{ __fscnode_identity_key}}


  # --------- GRPC Server Configuration  -----------------
  grpc:
    address: {{ inventory_hostname }}:20000 # could be 0.0.0.0
    tls:
      enabled:  true
      clientAuthRequired: false
      cert:
        file: {{ __fscnode_tls_cert }} 
      key:
        file: {{ __fscnode_tls_key }} 

      # If mutual TLS is enabled, clientRootCAs.files contains a list of additional root certificates
      # used for verifying certificates of client connections.
      # clientRootCAs:
      #  files:
      #  - /home/dave/github-cloned/fabric-smart-client/samples/fabric/iou/testdata/fsc/crypto/peerOrganizations/fsc.example.com/peers/approver.fsc.example.com/tls/ca.crt

    keepalive:
      minInterval: 60s
      interval: 300s
      timeout: 600s

  # --------- P2P configuration ----------------
  p2p:
    listenAddress: /dns4/{{ __fscnode_host }}/tcp/20001
    {% if __fscnode_role == __fscnode_bootstrap_role %}

    bootstrapNode:
    {% else %}

    bootstrapNode: {{ __fscnode_bootstrap_role }}
    {% endif %}

  kvs:
    persistence:
      type: badger
      opts:
        path: /root/{{ inventory_hostname }}/kvs

  # --------- HTML Server configuration for REST calls -------------
  web:
    enabled: true
    # HTTPS server listener address
    address: {{ inventory_hostname }}:20002  # could be 0.0.0.0
    tls:
      enabled:  true
      cert:
        file: {{ __fscnode_tls_cert }} 
      key:
        file: {{ __fscnode_tls_key }} 
   
      clientRootCAs:
        files:
        - {{ __fscnode_tls_ca }} # check this as it should be perhaps the fsc org root ca really rather than the node as the client will be part of the fsc org

  # ---------------- Tracing and Metrics --------------------------
  tracing:
    provider: none
    # udp:
    #  address: 127.0.0.1:8125

  metrics:
    provider: prometheus
    # statsd configuration
    # statsd:
    #  network: udp
    #  address: 127.0.0.1:8125
    #  writeInterval: 10s
    #  prefix:

  # ----------------- FSC Resolvers -------------------------------
  # The endpoint section tells how to reach other FSC node in the network.
  # For each node, the name, the domain, the identity of the node, and its addresses must be specified.
  endpoint:
    resolvers:
#TODO: Exclude self from this list
{% for fscnode in (groups['fsc'] | default([])) %}
{% set fscnode_role = (hostvars | dict2items | selectattr('value.ansible_host', 'eq', fscnode) | map(attribute='value.group_names') | list | first | difference('fsc') | first) %}
      # name has to match group name not the hostname
    - name: {{ fscnode_role }}
      domain: 
      identity:
        path: /root/crypto-config/peerOrganizations/fsc/peers/{{fscnode}}/msp/signcerts/{{fscnode}}-cert.pem
      addresses:
      {% if fscnode_role == __fscnode_bootstrap_role %} 
        P2P: {{__fscnode_bootstrap_address}}:20001
      {% endif %}

      aliases:
{% endfor %}
 
# ----------------------- Fabric Driver Configuration ---------------------------
fabric:
  enabled: true
  main:
    default: true
    mspCacheSize: 500
    defaultMSP: {{ __fscnode_name }}
    msps:
      - id: {{ __fscnode_name }}
        mspType: bccsp
        mspID: {{ __fscnode_owningorg }}MSP
        # TODO: What is this value used for vs mspCacheSize
        cacheSize: 0
        path: {{ __fscnode_fabric_msp }}
        opts:
          BCCSP:
            Default: SW
            SW:
              Hash: SHA2
              Security: 256
{% if __fscnode_role in __idemix_roles %}

      - id: idemix
        mspType: idemix
        mspID: IdemixOrgMSP
        path: /root/crypto-config/peerOrganizations/idemix/{{ __fscnode_role }}
        opts:
          BCCSP:
            Default: SW
            SW:
              Hash: SHA2
              Security: 256        
{% endif %}

    tls:
      enabled:  true
      clientAuthRequired: false
      # Only required if using mutual tls
      # clientCert:
      #   file: {{ __fscnode_fabric_tls_cert }}
      # clientKey:
      #   file: {{ __fscnode_fabric_tls_key }}

    keepalive:
      interval: 60s
      timeout: 600s

    ordering:
      numRetries: 3
      retryInternal: 3s

# This is a set of data that defines a client grpc connection to a peer, it looks like the code will
# pick a peer randomly to query and to discover from. It should probably be a peer that's associated the org of the fsc node
# TODO: Support multiple peer nodes
    peers:
      - address: '{{ __first_peer_in_org }}:7051'
        connectionTimeout: 10s
        tlsRootCertFile: {{ __fscnode_fabric_tls_ca }} # can use this as all nodes in the same org have the same tls ca file
        serverNameOverride:

    # TODO: Assumes single channel in channelIDs, need to support multiple channels
    channels:
      - name: {{channelIDs}}
        default: true
        chaincodes:
          - name: {{ ccName }}
            private: false
            
    vault:
      persistence:
        type: badger
        opts:
          path: /root/{{ inventory_hostname }}/vault
      txidstore:
          cache: 200      

    endpoint:
      resolvers:
{% for fscnode in (groups['fsc'] | default([])) %}
{% set fscnode_role = (hostvars | dict2items | selectattr('value.ansible_host', 'eq', fscnode) | map(attribute='value.group_names') | list | first | difference('fsc') | first) %}

      - name: {{fscnode_role}}
        domain:
        identity:
          mspID: {{hostvars[fscnode].owning_org}}MSP
          # The nodes msp (but private key isn't used)
          path: /root/crypto-config/peerOrganizations/{{hostvars[fscnode].owning_org}}/peers/{{fscnode}}/msp
          addresses:
          aliases:
          - {{ fscnode_role }}
{% endfor %}